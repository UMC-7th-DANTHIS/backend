name: danthis_dev

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

jobs:
  develop:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Secrets 값 확인
      - name: Validate Secrets
        run: |
          if [ -z "$APPLICATION_DEV_YML" ]; then
            echo "Error: APPLICATION_DEV_YML is not set."
            exit 1
          fi
          if [ -z "$APPLICATION_OAUTH_YML" ]; then
            echo "Error: APPLICATION_OAUTH_YML is not set."
            exit 1
          fi
          if [ -z "$APPLICATION_JWT_YML" ]; then
            echo "Error: APPLICATION_JWT_YML is not set."
            exit 1
          fi
          if [ -z "$APPLICATION_S3_YML" ]; then
            echo "Error: APPLICATION_S3_YML is not set."
            exit 1
          fi

      - name: Copy dev Secret
        env:
          DEV_SECRET: ${{ secrets.APPLICATION_DEV_YML }}
          DEV_SECRET_DIR: src/main/resources
          DEV_SECRET_DIR_FILE_NAME: application-dev.yml
        run: echo $DEV_SECRET | base64 --decode >> $DEV_SECRET_DIR/$DEV_SECRET_DIR_FILE_NAME

      - name: Copy oauth Secret
        env:
          DEV_SECRET: ${{ secrets.APPLICATION_OAUTH_YML }}
          DEV_SECRET_DIR: src/main/resources
          DEV_SECRET_DIR_FILE_NAME: application-oauth.yml
        run: echo $DEV_SECRET | base64 --decode >> $DEV_SECRET_DIR/$DEV_SECRET_DIR_FILE_NAME

      - name: Copy jwt Secret
        env:
          DEV_SECRET: ${{ secrets.APPLICATION_JWT_YML }}
          DEV_SECRET_DIR: src/main/resources
          DEV_SECRET_DIR_FILE_NAME: application-jwt.yml
        run: echo $DEV_SECRET | base64 --decode >> $DEV_SECRET_DIR/$DEV_SECRET_DIR_FILE_NAME

      - name: Copy s3 Secret
        env:
          DEV_SECRET: ${{ secrets.APPLICATION_S3_YML }}
          DEV_SECRET_DIR: src/main/resources
          DEV_SECRET_DIR_FILE_NAME: application-s3.yml
        run: echo $DEV_SECRET | base64 --decode >> $DEV_SECRET_DIR/$DEV_SECRET_DIR_FILE_NAME

      - name: ./gradlew 권한 설정
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: |
          ./gradlew clean
          ./gradlew compileJava
          ./gradlew build

      - name: Docker Build & Push to DockerHub
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:latest

      - name: Get GitHub IP
        id: ip
        uses: haythem/public-ip@v1.2

      - name: AWS Setting
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ap-northeast-2

      - name: Add GitHub IP to AWS
        run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32

      - name: Copy docker-compose.yml to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.KEY }}
          port: 22
          source: "./docker-compose.yml"
          target: "./danthis"

      # 복사된 docker-compose.yml 확인
      - name: Verify docker-compose.yml on EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.KEY }}
          port: 22
          script: |
            if [ -f ./danthis/docker-compose.yml ]; then
              echo "docker-compose.yml exists on EC2."
            else
              echo "docker-compose.yml not found on EC2."
              exit 1
            fi

      - name: Access Server with SSH Key, pull and execute docker-compose image
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.KEY }}
          port: 22
          script: |
            cd danthis
            sudo docker-compose down
            sudo docker-compose pull
            sudo docker-compose up -d
            sudo docker image prune -f

      # 서비스 상태 확인
      - name: Verify Service is Running
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.KEY }}
          port: 22
          script: |
            sleep 10
            curl -f http://localhost:8080 || (echo "Service is not running" && exit 1)

      - name: Remove Github IP From Security Group
        run: |
          aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
